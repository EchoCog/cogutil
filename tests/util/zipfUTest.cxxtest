/** zipfUTest.cxxtest ---
 *
 * Copyright (C) 2019, 2020 Linas Vepstas
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <climits>
#include <opencog/util/zipf.h>

using namespace opencog;

class zipfUTest : public CxxTest::TestSuite
{
public:

	// Check that the generated distribution is normally distributed.
	void verify(const std::vector<int>& pdf,
	            int len, double s=1.0, double q=0.0)
	{
		// Create the expected distribution
		double norm = 0.0;
		std::vector<double> expect;
		expect.reserve(len);
		for (int i = 1; i <len; i++)
		{
			double term = std::pow (i+q, -s);
			expect[i] = term;
			norm += term;
		}

		// Normalize
		for (int i = 1; i <len; i++)
			expect[i] *= 1.0 / norm;

		// Also normalize the pdf.
		size_t cnt = 0;
		for (int i = 1; i <len; i++)
			cnt += pdf[i];
		double fcnt = (double) cnt;

		// Take the difference.  We expect the difference
		// to be zero. Also adjust the variance; we expect
		// a normal distribution.
		double mean = 0.0;
		double meansq = 0.0;
		for (int i = 1; i <len; i++)
		{
			expect[i] -= pdf[i] / fcnt;

			// The tail of the distribution is very accurate.
			// The head, not so much. Multiplying by sqrt seems
			// to turn the distribution into a normal distribution.
			expect[i] *= sqrt(i);

			mean += expect[i];
			meansq += expect[i] * expect[i];
		}
		mean *= 1.0 / len;
		meansq *= 1.0 / len;
		double rms = sqrt(meansq);

		// rms should be near 1/(2pi sqrt(cnt))
		double erms = 1.0 / sqrt(2.0 * 3.14159 * fcnt);

		double navg = mean*sqrt(fcnt*len);
		double nrms = rms/erms;
		printf("Distribution: n=%d s=%4.3f q=%4.2f cnt=%lu mean=%6.4g rms=%6.4g\n",
			len, s, q, cnt, navg, nrms);

		TS_ASSERT_LESS_THAN(navg, 2.0);
		TS_ASSERT_DELTA(nrms, 1.0, 0.1);

		// Actually test. We're going to use sigma as the max allowed
		// deviation. For now five-sigma seems OK.
		double sigma = 5.0;
		for (int i = 1; i < len; i++)
		{
			// Should have approx == 1.0, approximately.
			TS_ASSERT_DELTA(expect[i], 0.0, sigma*erms);
		}
	}

	// Test the Zipf distribution, 300 bins, for exponent s=1.
	// This is a pretty small test, as such things go.
	void test_zipf()
	{
		std::random_device rd;
		std::mt19937 gen(rd());

		int sz = 300;
		zipf_distribution<> zipf(sz);
		printf("\nzipf_distribution: done with init\n");

		std::vector<int> pdf;
		pdf.reserve(sz+1);
		for (int i = 0; i <= sz; i++)
			pdf[i] = 0;

		for (size_t s = 0; s < 1623000; s++)
		{
			unsigned int draw = zipf(gen);
			TS_ASSERT_LESS_THAN_EQUALS(0, draw);
			TS_ASSERT_LESS_THAN_EQUALS(draw, sz);
			pdf[draw] ++;
		}
		printf("Last bucket, zipf=%d\n", pdf[sz]);
		TS_ASSERT_LESS_THAN(700, pdf[sz]);
		TS_ASSERT_LESS_THAN(pdf[sz], 1100);

		verify(pdf, sz);
	}

	// Test the Zipf distribution, 300 bins, for exponent s=1.
	// This is a pretty small test, as such things go.
	void test_ztable()
	{
		std::random_device rd;
		std::mt19937 gen(rd());

		int sz = 300;
		zipf_table_distribution<> zipf(sz);
		printf("\nzipf-small: done with init\n");

		std::vector<int> pdf;
		pdf.reserve(sz+1);
		for (int i = 0; i <= sz; i++)
			pdf[i] = 0;

		for (size_t s = 0; s < 1623000; s++)
		{
			unsigned int draw = zipf(gen);
			TS_ASSERT_LESS_THAN_EQUALS(0, draw);
			TS_ASSERT_LESS_THAN_EQUALS(draw, sz);
			pdf[draw] ++;
		}
		printf("Last bucket, zipf-small=%d\n", pdf[sz]);
		TS_ASSERT_LESS_THAN(700, pdf[sz]);
		TS_ASSERT_LESS_THAN(pdf[sz], 1100);

		verify(pdf, sz);
	}

	// Use both the table, and the rejection-inversion method
	// and compare them to one-another, for 300 bins and exponent s=1.5
	void test_deep_zipf()
	{
		std::random_device rd;
		std::mt19937 gen(rd());

		int sz = 300;
		zipf_distribution<> zipf(sz, 1.5);
		zipf_table_distribution<> ztab(sz, 1.5);

		printf("\ndeep: done with init\n");

		std::vector<int> pdf;
		pdf.reserve(sz+1);
		for (int i = 0; i <= sz; i++)
			pdf[i] = 0;

		int norm = 0;
		for (size_t s = 0; s < 41623000; s++)
		{
			pdf[zipf(gen)] ++;
			unsigned int draw = ztab(gen);
			if (1 == draw) norm ++;
			pdf[draw] --;
		}

		printf("norm = %d\n", norm);
		for (int i = 1; i <= sz; i++)
			printf("residual bucket %d = %d\n", i, pdf[i]);

		// Some hand-crafted, very rough bound for what we
		// expect the distribution to lie inside of. These
		// are probabilistic; something like 99 out of 100
		// unit tests should pass, but one might fail.
		TS_ASSERT_LESS_THAN(16123000, norm);
		TS_ASSERT_LESS_THAN(norm, 17223000);

		TS_ASSERT_LESS_THAN(abs(pdf[1]), 18000);
		TS_ASSERT_LESS_THAN(abs(pdf[2]), 13000);
		for (int i = 3; i <= 40; i++)
			TS_ASSERT_LESS_THAN(abs(pdf[i]), 8000);
		for (int i = 50; i <= 110; i++)
			TS_ASSERT_LESS_THAN(abs(pdf[i]), 1500);
		for (int i = 150; i <= 300; i++)
			TS_ASSERT_LESS_THAN(abs(pdf[i]), 600);
	}
};
